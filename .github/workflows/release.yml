name: Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+"
      - "v[0-9]+.[0-9]+.[0-9]+"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            artifact_name: hovimestari
            asset_name: hovimestari-linux-amd64.zip
          - os: windows-latest
            platform: windows
            artifact_name: hovimestari.exe
            asset_name: hovimestari-windows-amd64.zip
          - os: macos-latest
            platform: darwin
            artifact_name: hovimestari
            asset_name: hovimestari-darwin-amd64.zip

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Get latest tag
        id: get_latest_tag
        if: github.event_name == 'workflow_dispatch'
        shell: bash
        run: |
          # Fetch all tags
          git fetch --tags

          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Get version
        id: get_version
        shell: bash
        run: |
          if [[ $GITHUB_EVENT_NAME == 'push' ]]; then
            # Tag-based trigger
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION_NUMBER=${VERSION#v}
          else
            # Manual trigger - use latest tag with run number
            LATEST_TAG=${{ steps.get_latest_tag.outputs.LATEST_TAG }}
            VERSION="${LATEST_TAG}-${{ github.run_number }}"
            VERSION_NUMBER="${VERSION#v}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_NUMBER=$VERSION_NUMBER" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION for ${{ matrix.platform }}"

      - name: Build
        shell: bash
        run: |
          mkdir -p build
          CGO_ENABLED=0 GOOS=${{ matrix.platform }} GOARCH=amd64 go build \
            -ldflags="-X main.Version=${{ steps.get_version.outputs.VERSION_NUMBER }} -w -s" \
            -o build/${{ matrix.artifact_name }} ./cmd/hovimestari

      - name: Package
        shell: bash
        run: |
          mkdir -p release-pkg
          mkdir -p release-pkg/hovimestari-${{ matrix.platform }}-amd64
          cp build/${{ matrix.artifact_name }} release-pkg/hovimestari-${{ matrix.platform }}-amd64/${{ matrix.artifact_name }}
          cp prompts.json release-pkg/hovimestari-${{ matrix.platform }}-amd64/
          cp config.example.json release-pkg/hovimestari-${{ matrix.platform }}-amd64/
          cp README.md release-pkg/hovimestari-${{ matrix.platform }}-amd64/
          if [ ${{ matrix.platform }} = "windows" ]; then
            pwsh -Command "Compress-Archive -Path release-pkg/hovimestari-${{ matrix.platform }}-amd64/* -DestinationPath release-pkg/hovimestari-${{ steps.get_version.outputs.VERSION_NUMBER }}-${{ matrix.platform }}-amd64.zip"
          else
            cd release-pkg
            zip -r hovimestari-${{ steps.get_version.outputs.VERSION_NUMBER }}-${{ matrix.platform }}-amd64.zip hovimestari-${{ matrix.platform }}-amd64
            cd ..
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: release-pkg/hovimestari-${{ steps.get_version.outputs.VERSION_NUMBER }}-${{ matrix.platform }}-amd64.zip
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest_tag
        if: github.event_name == 'workflow_dispatch'
        shell: bash
        run: |
          # Fetch all tags
          git fetch --tags

          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0)
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"

      - name: Get version
        id: get_version
        shell: bash
        run: |
          if [[ $GITHUB_EVENT_NAME == 'push' ]]; then
            # Tag-based trigger
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION_NUMBER=${VERSION#v}
          else
            # Manual trigger - use latest tag with run number
            LATEST_TAG=${{ steps.get_latest_tag.outputs.LATEST_TAG }}
            VERSION="${LATEST_TAG}-${{ github.run_number }}"
            VERSION_NUMBER="${VERSION#v}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_NUMBER=$VERSION_NUMBER" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts
          merge-multiple: true

      - name: Display structure of downloaded files
        run: ls -R release-artifacts

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.get_version.outputs.VERSION }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          artifacts: "release-artifacts/*.zip"
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: true
