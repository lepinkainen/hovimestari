# Project: Hovimestari - Personal AI Butler Assistant

## Technologies Used

- **Language:** Go (Golang)
- **Database:** SQLite (using `github.com/mattn/go-sqlite3`)
- **LLM:** Google Gemini (using `github.com/google/generative-ai-go`)
- **Calendar Parsing:** iCalendar (using `github.com/apognu/gocal`)
- **CLI Framework:** Cobra (`github.com/spf13/cobra`)
- **Build System:** Go Modules, Makefile

## Project Structure

- `cmd/hovimestari/main.go`: Main application entry point and CLI command definitions.
- `internal/`: Contains the core logic, organized into sub-packages:
  - `brief/`: Handles the generation of daily briefs by combining memories and LLM interaction.
  - `config/`: Manages loading and saving application configuration (`config.json`).
  - `importer/calendar/`: Fetches and parses calendar data from a WebCal URL.
  - `llm/`: Provides the client for interacting with the Google Gemini API.
  - `store/`: Manages the SQLite database connection and operations (adding/querying memories).
- `go.mod` / `go.sum`: Go module definition and dependencies.
- `Makefile`: Defines common development tasks (build, run, import, generate, etc.).
- `README.md`: Project documentation.
- `config.example.json`: An example configuration file.
- `.gitignore`: Specifies intentionally untracked files that Git should ignore.
- `memories.db` (Generated, ignored): The SQLite database file.
- `config.json` (Generated, ignored): The actual user configuration file.

## Key Concepts

- **Memories:** Units of information (calendar events, manual notes) stored in the SQLite database.
- **Importers:** Processes that fetch data from external sources (like calendars) and store them as memories.
- **Briefs:** Summaries generated by the LLM based on relevant memories for a given period, in Finnish.

## Language

- The name "Hovimestari" means "Butler" in Finnish.
- All briefs and responses are generated in Finnish.
- Code comments and documentation are in English.

## Development Guidelines

### Code Style

- Follow standard Go code style and conventions (gofmt).
- Use meaningful variable and function names.
- Add comments for exported functions and types.
- Keep functions small and focused on a single responsibility.

### Error Handling

- Use the `fmt.Errorf("failed to X: %w", err)` pattern for error wrapping.
- Always check errors and provide context.
- Avoid panics in production code.

### Dependencies

- Prefer standard library solutions when possible.
- Minimize external dependencies.
- Pin dependency versions in go.mod.

### Testing

- Write unit tests for core functionality.
- Use table-driven tests where appropriate.
- Mock external dependencies for testing.

## Common Tasks

### Adding a New Importer

1. Create a new package under `internal/importer/`.
2. Implement the importer with a similar interface to the calendar importer.
3. Add a new command in `cmd/hovimestari/main.go`.
4. Update the README.md with the new functionality.

### Modifying the Database Schema

1. Update the `Initialize` function in `internal/store/store.go`.
2. Add any new methods needed to interact with the new schema.
3. Consider adding a migration mechanism if the change is not backward compatible.

### Adding a New Command

1. Create a new command function in `cmd/hovimestari/main.go`.
2. Add the command to the root command in the `main` function.
3. Implement the command's functionality.
4. Update the README.md with the new command.

## Future Development

- Telegram integration for sending daily briefs and receiving queries.
- Additional importers (weather, email, etc.).
- Web interface for viewing and managing memories.
- Scheduled execution via cron jobs.
